type Product {
    id: ID!
    gs1Id: String!
    name: String
    description: String
    brand: String
    manufacturer: String
    netWeight: String
    status: String
    createdByRole: String
    createdAt: String
    updatedAt: String
    history: [AuditLog!]
}

type AuditLog {
    id: ID!
    action: String!
    changedBy: String
    before: JSON
    after: JSON
    createdAt: String
}

scalar JSON

input ProductInput {
    gs1Id: String!
    name: String!
    description: String
    brand: String
    manufacturer: String
    netWeight: String
}

input ProductPatch {
    name: String
    description: String
    brand: String
    manufacturer: String
    netWeight: String
}

type ProductsResponse {
    total: Int!
    page: Int!
    pages: Int!
    items: [Product!]!
}

type Query {
    product(id: ID!): Product
    products(page: Int = 1, limit: Int = 10): ProductsResponse!
}

type ClearResult {
    success: Boolean!
}

type Mutation {
    createProduct(input: ProductInput!): Product
    updateProduct(id: ID!, patch: ProductPatch!): Product
    approveProduct(id: ID!): Product
    clearProducts: ClearResult!
}
